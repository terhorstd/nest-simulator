#
# detailed syntax defined in
# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
#
name: "NEST matrix jobs"
env:
  CXX_FLAGS: "-pedantic -Wextra -Woverloaded-virtual -Wno-unknown-pragmas"
  PYTHONPATH: ${{ github.workspace }}/build/python
on: [push, pull_request]


jobs:
  static_checks:
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    strategy:
      fail-fast: true
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "DEBUG: Check Python path"
        run: echo $PYTHONPATH

      - name: "Restore apt cache"
        uses: actions/cache@v2
        env:
          cache-name: "apt-cache"
        with:
          path: |
            !/var/cache/apt/archives/lock
            !/var/cache/apt/archives/partial
            /var/cache/apt
          key: ${{ runner.os }}-system-${{ env.cache-name }}-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-${{ env.cache-name }}-
            ${{ runner.os }}-system-

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          #https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          sudo apt-get install libltdl-dev libreadline6-dev libncurses5-dev libgsl0-dev python3-all-dev jq pycodestyle libpcre3 libpcre3-dev python2-dev libboost-all-dev
          sudo apt-get install openmpi-bin libopenmpi-dev libgsl0-dev tcl8.6 tcl8.6-dev tk8.6-dev
          sudo apt-get install libboost-filesystem-dev libboost-regex-dev libboost-wave-dev libboost-python-dev libboost-program-options-dev libboost-test-dev
          sudo apt-get install vera++
          sudo ldconfig
          g++ --version

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy 'junitparser>=2' numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "DEBUG: list files"
        if: always()
        run: |
          pwd
          ls -la * || true
          ls -la build/* || true

      - name: "Find changed files"
        run: |
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo "GITHUB_ENV = $GITHUB_ENV"
          cat $GITHUB_ENV

      - name: "DEBUG: list files"
        run: |
          pwd
          ls -la * || true
          ls -la build/* || true

      - name: "list environment"
        run: set

      - name: "Static Code Analysis"
        run: ./build_support/ci_checks.sh
        env:
          CHANGED_FILES: ${{ env.CHANGED_FILES }}

      - name: "DEBUG: list files"
        run: |
          pwd
          ls -la * || true
          ls -la build/* || true

  test_linux:
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    runs-on: ${{ matrix.os }}
    needs: [static_checks]
    env:
      NEST_BUILD_NAME: ${{ matrix.NEST_BUILD_NAME }}
      WITH_GSL: ${{ matrix.WITH_GSL }}
      WITH_LIBBOOST: ${{ matrix.WITH_LIBBOOST }}
      WITH_LIBNEUROSIM: ${{ matrix.WITH_LIBNEUROSIM }}
      WITH_LTDL: ${{ matrix.WITH_LTDL }}
      WITH_MPI: ${{ matrix.WITH_MPI }}
      WITH_MUSIC: ${{ matrix.WITH_MUSIC }}
      WITH_OPENMP: ${{ matrix.WITH_OPENMP }}
      WITH_PYTHON: ${{ matrix.WITH_PYTHON }}
      WITH_READLINE: ${{ matrix.WITH_READLINE }}
      WITH_SIONLIB: ${{ matrix.WITH_SIONLIB }}
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      CXX_FLAGS: ${{ matrix.CXX_FLAGS }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-20.04"]
        cpp_compiler: ["gcc", "clang"]
        NEST_BUILD_NAME: ["MINIMAL"]
        #WITH_GSL: ["OFF"]
        #WITH_LIBBOOST: ["OFF"]
        #WITH_LIBNEUROSIM: ["OFF"]
        #WITH_LTDL: ["OFF"]
        #WITH_MPI: ["OFF"]
        #WITH_MUSIC: ["OFF"]
        #WITH_OPENMP: ["OFF"]
        #WITH_PYTHON: ["OFF"]
        #WITH_READLINE: ["OFF"]
        #WITH_SIONLIB: ["OFF"]

        include:
          - os: "ubuntu-20.04"
            cpp_compiler: "gcc"
            NEST_BUILD_NAME: "OPENMP_ONLY"
            WITH_GSL: "ON"
            WITH_LIBBOOST: "ON"
            WITH_LTDL: "ON"
            WITH_OPENMP: "ON"
            CXX_FLAGS: "-pedantic -Wextra -D_GLIBCXX_ASSERTIONS"

        #  - NEST_BUILD_NAME: "MPI_ONLY"
        #    WITH_GSL: "ON"
        #    WITH_LIBBOOST: "ON"
        #    WITH_LTDL: "ON"
        #    WITH_MPI: "ON"

        #  - NEST_BUILD_NAME: "FULL"
        #    WITH_GSL: "ON"
        #    WITH_LIBBOOST: "ON"
        #    WITH_LIBNEUROSIM: "ON"
        #    WITH_LTDL: "ON"
        #    WITH_MPI: "ON"
        #    WITH_MUSIC: "ON"
        #    WITH_OPENMP: "ON"
        #    WITH_PYTHON: "ON"
        #    WITH_READLINE: "ON"
        #    WITH_SIONLIB: "ON"
        #    CXX_FLAGS: "-pedantic -Wextra -D_GLIBCXX_ASSERTIONS"

        #  - NEST_BUILD_NAME: "FULL_NO_EXTERNAL_FEATURES"
        #    WITH_GSL: "ON"
        #    WITH_LIBBOOST: "ON"
        #    WITH_LIBNEUROSIM: OFF
        #    WITH_LTDL: "ON"
        #    WITH_MPI: OFF
        #    WITH_MUSIC: OFF
        #    WITH_OPENMP: "ON"
        #    WITH_PYTHON: "ON"
        #    WITH_READLINE: "ON"
        #    WITH_SIONLIB: OFF

        #  - cpp_compiler: "gcc"
        #    CC: "gcc"
        #    CXX: "gxx"
        #    CXX_FLAGS: "-pedantic -Wextra -Wno-unknown-pragmas -D_GLIBCXX_ASSERTIONS"
        #  - cpp_compiler: "clang"
        #    CC: "clang-11"
        #    CXX: "clang++-11"

    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Find changed files"
        run: |
          echo "CHANGED_FILES<<EOF" >>$GITHUB_ENV
          echo "$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})" >>$GITHUB_ENV
          echo 'EOF' >>$GITHUB_ENV

      - name: "DEBUG: Check path"
        run: |
          echo $PATH
          echo $PWD
        shell: bash

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "DEBUG: Check Python path"
        run: echo $PYTHONPATH

      - name: "Restore apt cache"
        uses: actions/cache@v2
        env:
          cache-name: "apt-cache"
        with:
          path: |
            !/var/cache/apt/archives/lock
            !/var/cache/apt/archives/partial
            /var/cache/apt
          key: ${{ runner.os }}-system-${{ env.cache-name }}-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-${{ env.cache-name }}-
            ${{ runner.os }}-system-

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          #https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          sudo apt-get install libltdl-dev libreadline6-dev libncurses5-dev libgsl0-dev python3-all-dev jq pycodestyle libpcre3 libpcre3-dev python2-dev libboost-all-dev
          sudo apt-get install openmpi-bin libopenmpi-dev libgsl0-dev tcl8.6 tcl8.6-dev tk8.6-dev
          sudo apt-get install libboost-filesystem-dev libboost-regex-dev libboost-wave-dev libboost-python-dev libboost-program-options-dev libboost-test-dev
          sudo apt-get install vera++
          sudo ldconfig
          g++ --version

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy 'junitparser>=2' numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "DEBUG: find commands"
        run: |
          echo "python3: $(which python3)"
          echo "cython: $(which cython)"
          echo "cythonize: $(which cythonize)"
          echo "cython3: $(which cython3)"
          echo "cython.py: $(which cython.py)"
          echo "cythonize.py: $(which cythonize.py)"
          find /opt/hostedtoolcache/Python/ -iname "*cython*"

      - name: "Build NEST"
        run: |
          ./build_support/ci_build.sh 2>&1 | tee ci_build.sh.log
          python build_support/parse_build_log.py ci_build.sh.log ${{ github.workspace }}
        env:
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
          #get changed files: https://github.com/marketplace/actions/get-changed-files

      - name: "Upload install and test results"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: "test_linux-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.NEST_BUILD_NAME }}-logs"
          path: |
            ci_build.sh.log
            install_manifest.txt
            **.log
            build/reports/**

      - name: "DEBUG: list files"
        run: |
          pwd
          ls -la * || true
          ls -la build/* || true

  test_macos:
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    runs-on: ${{ matrix.os }}
    needs: [static_checks]
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest]
        cpp_compiler: ["clang"]
        include:
          - NEST_BUILD_NAME: "MINIMAL"
            WITH_GSL: OFF
            WITH_LIBBOOST: OFF
            WITH_LIBNEUROSIM: OFF
            WITH_LTDL: OFF
            WITH_MPI: OFF
            WITH_MUSIC: OFF
            WITH_OPENMP: OFF
            WITH_PYTHON: OFF
            WITH_READLINE: OFF
            WITH_SIONLIB: OFF
          - cpp_compiler: "gcc"
            CC: "gcc"
            CXX: "gxx"
            CXX_FLAGS: "-pedantic -Wextra -Wno-unknown-pragmas -D_GLIBCXX_ASSERTIONS"
          - cpp_compiler: "clang"
            CC: "clang-11"
            CXX: "clang++-11"

    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Find changed files"
        run: |
          echo "CHANGED_FILES<<EOF" >>$GITHUB_ENV
          echo "$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})" >>$GITHUB_ENV
          echo 'EOF' >>$GITHUB_ENV

      - name: "DEBUG: Check path"
        run: |
          echo $PATH
          echo $PWD
        shell: bash

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "DEBUG: Check Python path"
        run: echo $PYTHONPATH

      - name: "Install MacOS system dependencies"
        run: |
          brew install coreutils gsl open-mpi automake autoconf libtool
          brew info python

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy "junitparser>=2" numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "DEBUG: find commands"
        run: |
          echo "python3: $(which python3)"
          echo "cython: $(which cython)"
          echo "cythonize: $(which cythonize)"
          echo "cython3: $(which cython3)"
          echo "cython.py: $(which cython.py)"
          echo "cythonize.py: $(which cythonize.py)"

      - name: "Build NEST"
        run: |
          ./build_support/ci_build.sh 2>&1 | tee ci_build.sh.log
          python build_support/parse_build_log.py ci_build.sh.log ${{ github.workspace }}
        env:
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
          #get changed files: https://github.com/marketplace/actions/get-changed-files

      - name: "Upload install and test results"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: "test_macos-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.NEST_BUILD_NAME }}-logs"
          path: |
            ci_build.sh.log
            install_manifest.txt
            **.log
            build/reports/**

      - name: "DEBUG: list files"
        run: |
          pwd
          ls -la * || true
          ls -la build/* || true

